{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"GOOD_TO_KNOW/","text":"How to make MkDOcs Example: https://docs.civicrm.org/dev/en/latest/extensions/documentation/ Deploy: https://www.mkdocs.org/user-guide/deploying-your-docs/ mkdocs gh-deploy --clean --config-file ./config/mkdocs.yml --site-dir site","title":"How to make MkDOcs"},{"location":"GOOD_TO_KNOW/#how-to-make-mkdocs","text":"","title":"How to make MkDOcs"},{"location":"GOOD_TO_KNOW/#example-httpsdocscivicrmorgdevenlatestextensionsdocumentation","text":"","title":"Example: https://docs.civicrm.org/dev/en/latest/extensions/documentation/"},{"location":"GOOD_TO_KNOW/#deploy-httpswwwmkdocsorguser-guidedeploying-your-docs","text":"mkdocs gh-deploy --clean --config-file ./config/mkdocs.yml --site-dir site","title":"Deploy: https://www.mkdocs.org/user-guide/deploying-your-docs/"},{"location":"INDEX/","text":"Pyspark Template - With tests This project contains below: Project Template for Pyspark projects Project structure information here I like to keep the main README.md at the top and everything else under a folder called \"readme\". You should pick whatever works for you. A good coverage for .gitignore here Project mainly uses: Python, PySpark (SQL & DataFrames) When you write DataFrames, your code is much more organised and easier to test Try to go with DataFrame option, unless there are other restrictions like skillset gap (or) some feature only available in SQL Python example test case here: data-engineering/utils/python_utils Good practices With the evolution of Cloud; you are not restricted to using/managing config file/s, you can also rely on Cloud services like AWS Secrets Manager, SSM Parameter Store, etc. to maintain secret values or even default values Never ever Hard code environment name, even if you have just 1 environment. It has to either come from environment variable or config file or Cloud service Prefix your environment variables with something specific to your project, to avoid conflicts with other projects. For this package, I choose \"PBM_\" Keep your environment variable mapping in 1 common place. Use the python variables to map it to minimize the impact of change Ex: data-engineering/utils/constants/env_variable_mapper.py Always use a code linter of your choice from day 1 of your project Stick to 1 convention - choose between Singular vs Plural! Pre-requisites Python 3.7 Note: I am using vanilla python, NOT Anaconda!. It might work, but I haven't tested it! JDK 1.8 - Set JAVA_HOME Pycharm - IDE (Any version is just fine!) Set up python virtual environment in PyCharm specific to this project and configure Pycharm. Instructions here Close and open the terminal after this step to switch to \".venv\" Install requirements.txt Python packages used mypy - Type checking pytest - Testing python package pdoc3 - Docstring generator python package pydocstyle - Docstring style checker pylint - Codestyle checker tox - Running test suite Note: Python and Java version numbers are crucial You are all set to Fly! :)","title":"Home"},{"location":"INDEX/#pyspark-template-with-tests","text":"","title":"Pyspark Template - With tests"},{"location":"INDEX/#this-project-contains-below","text":"Project Template for Pyspark projects Project structure information here I like to keep the main README.md at the top and everything else under a folder called \"readme\". You should pick whatever works for you. A good coverage for .gitignore here Project mainly uses: Python, PySpark (SQL & DataFrames) When you write DataFrames, your code is much more organised and easier to test Try to go with DataFrame option, unless there are other restrictions like skillset gap (or) some feature only available in SQL Python example test case here: data-engineering/utils/python_utils","title":"This project contains below:"},{"location":"INDEX/#good-practices","text":"With the evolution of Cloud; you are not restricted to using/managing config file/s, you can also rely on Cloud services like AWS Secrets Manager, SSM Parameter Store, etc. to maintain secret values or even default values Never ever Hard code environment name, even if you have just 1 environment. It has to either come from environment variable or config file or Cloud service Prefix your environment variables with something specific to your project, to avoid conflicts with other projects. For this package, I choose \"PBM_\" Keep your environment variable mapping in 1 common place. Use the python variables to map it to minimize the impact of change Ex: data-engineering/utils/constants/env_variable_mapper.py Always use a code linter of your choice from day 1 of your project Stick to 1 convention - choose between Singular vs Plural!","title":"Good practices"},{"location":"INDEX/#pre-requisites","text":"Python 3.7 Note: I am using vanilla python, NOT Anaconda!. It might work, but I haven't tested it! JDK 1.8 - Set JAVA_HOME Pycharm - IDE (Any version is just fine!) Set up python virtual environment in PyCharm specific to this project and configure Pycharm. Instructions here Close and open the terminal after this step to switch to \".venv\" Install requirements.txt Python packages used mypy - Type checking pytest - Testing python package pdoc3 - Docstring generator python package pydocstyle - Docstring style checker pylint - Codestyle checker tox - Running test suite Note: Python and Java version numbers are crucial","title":"Pre-requisites"},{"location":"INDEX/#you-are-all-set-to-fly","text":"","title":"You are all set to Fly! :)"},{"location":"NAMING_CONVENTIONS/","text":"","title":"Naming Conventions"},{"location":"PROJECT_STRUCTURE/","text":"PySpark Project Structure data-engineering \u251c\u2500\u2500 transformation -> Data transformation python files | \u251c\u2500\u2500 __init__.py -> initializes the application, indicated that this folder is a python module | \u251c\u2500\u2500 ... -> Python files | \u2514\u2500\u2500 utils -> Helper utilities/functions which can be used across projects | \u251c\u2500\u2500 __init__.py -> initializes the application, indicated that this folder is a python module | \u251c\u2500\u2500 file_utils.py -> File Utilities | \u2514\u2500\u2500 constants - Project specific constants | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Default values python files | \u251c\u2500\u2500 tests -> Unit test files \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_file_utils.py \u2502 \u2514\u2500\u2500 test_constants - Project specific constants | \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 ... -> Default values python test files | \u251c\u2500\u2500 integration_tests -> Integration test files \u2502 \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Test files | \u251c\u2500\u2500 config -> Configuration files for code style, etc. \u2502 \u2514\u2500\u2500 .pylintrc -> Enforce PEP8 Code Style | \u251c\u2500\u2500 tox.ini -> test a python package in a set of virtual environments | \u251c\u2500\u2500 requirements.txt -> This file lists all of the Python packages that your app depends on | \u251c\u2500\u2500 setup.py -> Python dependency management tool | \u251c\u2500\u2500 README.md -> Summary of the project and any helpful documentation | \u251c\u2500\u2500 .gitignore -> Instructs git to ignore the files/directories specified in this file | \u251c\u2500\u2500 scripts -> general scripts, deployment scripts, etc. | \u251c\u2500\u2500 readme -> detailed set of readme files for developers | \u251c\u2500\u2500 images -> Images to be used in readme documents | \u2514\u2500\u2500 ... -> All images which helps in documentation | \u251c\u2500\u2500 PROJECT_STRUCTURE.md -> Project Structure | \u251c\u2500\u2500 DEVELOPER_GUIDELINES.md -> Developer Guidelines | \u2514\u2500\u2500 ... -> All helpful documentation which might help developers | \u251c\u2500\u2500 docs -> Devops related documents \u251c\u2500\u2500 \u2514\u2500\u2500 pull_request_template -> pull request templates | \u251c\u2500\u2500 pull_request_template.md -> Default pull request template. Default: feature branch | \u2514\u2500\u2500 branches -> Branch specific pull request templates | \u251c\u2500\u2500 feature.md -> Feature branch pull request template | \u251c\u2500\u2500 release.md -> Release branch pull request template | \u251c\u2500\u2500 bugfix.md -> Bugfix branch pull request template | \u2514\u2500\u2500 hotfix.md -> Hotfix branch pull request template | \u251c\u2500\u2500 dist -> Generated egg files -> Not committed to git | \u251c\u2500\u2500 gen_docs -> Generate documents - Not committed to git \u251c\u2500\u2500 \u251c\u2500\u2500 docstring -> Docstring -> Not committed to git \u2514\u2500\u2500 \u2514\u2500\u2500 coverage -> Test coverage report -> Not committed to git","title":"Project Structure"},{"location":"PROJECT_STRUCTURE/#pyspark-project-structure","text":"data-engineering \u251c\u2500\u2500 transformation -> Data transformation python files | \u251c\u2500\u2500 __init__.py -> initializes the application, indicated that this folder is a python module | \u251c\u2500\u2500 ... -> Python files | \u2514\u2500\u2500 utils -> Helper utilities/functions which can be used across projects | \u251c\u2500\u2500 __init__.py -> initializes the application, indicated that this folder is a python module | \u251c\u2500\u2500 file_utils.py -> File Utilities | \u2514\u2500\u2500 constants - Project specific constants | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Default values python files | \u251c\u2500\u2500 tests -> Unit test files \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_file_utils.py \u2502 \u2514\u2500\u2500 test_constants - Project specific constants | \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 ... -> Default values python test files | \u251c\u2500\u2500 integration_tests -> Integration test files \u2502 \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Test files | \u251c\u2500\u2500 config -> Configuration files for code style, etc. \u2502 \u2514\u2500\u2500 .pylintrc -> Enforce PEP8 Code Style | \u251c\u2500\u2500 tox.ini -> test a python package in a set of virtual environments | \u251c\u2500\u2500 requirements.txt -> This file lists all of the Python packages that your app depends on | \u251c\u2500\u2500 setup.py -> Python dependency management tool | \u251c\u2500\u2500 README.md -> Summary of the project and any helpful documentation | \u251c\u2500\u2500 .gitignore -> Instructs git to ignore the files/directories specified in this file | \u251c\u2500\u2500 scripts -> general scripts, deployment scripts, etc. | \u251c\u2500\u2500 readme -> detailed set of readme files for developers | \u251c\u2500\u2500 images -> Images to be used in readme documents | \u2514\u2500\u2500 ... -> All images which helps in documentation | \u251c\u2500\u2500 PROJECT_STRUCTURE.md -> Project Structure | \u251c\u2500\u2500 DEVELOPER_GUIDELINES.md -> Developer Guidelines | \u2514\u2500\u2500 ... -> All helpful documentation which might help developers | \u251c\u2500\u2500 docs -> Devops related documents \u251c\u2500\u2500 \u2514\u2500\u2500 pull_request_template -> pull request templates | \u251c\u2500\u2500 pull_request_template.md -> Default pull request template. Default: feature branch | \u2514\u2500\u2500 branches -> Branch specific pull request templates | \u251c\u2500\u2500 feature.md -> Feature branch pull request template | \u251c\u2500\u2500 release.md -> Release branch pull request template | \u251c\u2500\u2500 bugfix.md -> Bugfix branch pull request template | \u2514\u2500\u2500 hotfix.md -> Hotfix branch pull request template | \u251c\u2500\u2500 dist -> Generated egg files -> Not committed to git | \u251c\u2500\u2500 gen_docs -> Generate documents - Not committed to git \u251c\u2500\u2500 \u251c\u2500\u2500 docstring -> Docstring -> Not committed to git \u2514\u2500\u2500 \u2514\u2500\u2500 coverage -> Test coverage report -> Not committed to git","title":"PySpark Project Structure"},{"location":"SETUP/","text":"Set up Pycharm Set up Set up python virtual environment interpreter (Note: Make sure name is \".venv\", as this is already set in .gitignore file to be ignored while committing to git. Else choose the name and make sure to add it to gitignore) Set up integrated tools like test runner, docstring format, etc. Point to pylint config file Make sue to include the main package name for import to pick up the auto completion of your package name","title":"Set Up"},{"location":"SETUP/#set-up","text":"","title":"Set up"},{"location":"SETUP/#pycharm-set-up","text":"","title":"Pycharm Set up"},{"location":"SETUP/#set-up-python-virtual-environment-interpreter","text":"(Note: Make sure name is \".venv\", as this is already set in .gitignore file to be ignored while committing to git. Else choose the name and make sure to add it to gitignore)","title":"Set up python virtual environment interpreter"},{"location":"SETUP/#set-up-integrated-tools-like-test-runner-docstring-format-etc","text":"","title":"Set up integrated tools like test runner, docstring format, etc."},{"location":"SETUP/#point-to-pylint-config-file","text":"","title":"Point to pylint config file"},{"location":"SETUP/#make-sue-to-include-the-main-package-name-for-import-to-pick-up-the-auto-completion-of-your-package-name","text":"","title":"Make sue to include the main package name for import to pick up the auto completion of your package name"}]}